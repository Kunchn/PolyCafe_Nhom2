/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui.manager;

import javax.swing.SpinnerNumberModel;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoundedRangeModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.CategoryDAO;
import poly.cafe.dao.DrinkDAO;
import poly.cafe.dao.impl.CategoryDAOImpl;
import poly.cafe.dao.impl.DrinkDAOImpl;
import poly.cafe.entity.Category;
import poly.cafe.entity.Drink;
import poly.cafe.util.XDialog;
import poly.cafe.util.XIcon;

/**
 *
 * @author hungp
 */
public class DrinkManagerJDialog extends javax.swing.JDialog implements DrinkController{

    /**
     * Creates new form DrinkManagerJDialog
     */
    // Bên trong lớp DrinkManagerJDialog, trước constructor

    // DAO cho Category và Drink
    CategoryDAO categoryDAO = new CategoryDAOImpl(); //
    DrinkDAO drinkDAO = new DrinkDAOImpl(); //

    // Danh sách để lưu trữ categories và drinks đang được hiển thị/quản lý
    List<Category> categoriesList = new ArrayList<>(); //
    List<Drink> drinksList = new ArrayList<>(); // items trong lab, đổi tên cho rõ ràng

    // JFileChooser để chọn file hình ảnh
    JFileChooser fileChooser = new JFileChooser();

    // Có thể thêm một biến để lưu trữ dòng đang được chọn trong bảng tblDrinks,
    // hoặc lấy trực tiếp từ getSelectedRow() khi cần.
    // int currentRow = -1;

    public DrinkManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.open();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupTrangThai = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        pnlDanhSach = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrinks = new javax.swing.JTable();
        btnDeleteCheckedDrinks = new javax.swing.JButton();
        btnUncheckAllDrinks = new javax.swing.JButton();
        btnCheckAllDrinks = new javax.swing.JButton();
        pnlBieuMau = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtDrinkId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDrinkName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboCategories = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        rdoAvailable = new javax.swing.JRadioButton();
        rdoUnavailable = new javax.swing.JRadioButton();
        btnCreateDrink = new javax.swing.JButton();
        btnUpdateDrink = new javax.swing.JButton();
        btnDeleteDrink = new javax.swing.JButton();
        btnClearFormDrink = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        txtDiscount = new javax.swing.JSlider();
        btnChooseFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý đồ uống");

        tabs.setName(""); // NOI18N

        tblCategories.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loại đồ uống"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);

        tblDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đồ uống", "Tên đồ uống", "Đơn giá", "Giảm giá", "Trạng thái", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrinksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDrinks);

        btnDeleteCheckedDrinks.setText("Xóa các mục chọn");
        btnDeleteCheckedDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedDrinksActionPerformed(evt);
            }
        });

        btnUncheckAllDrinks.setText("Bỏ chọn tất cả");
        btnUncheckAllDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllDrinksActionPerformed(evt);
            }
        });

        btnCheckAllDrinks.setText("Chọn tất cả");
        btnCheckAllDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllDrinksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDanhSachLayout = new javax.swing.GroupLayout(pnlDanhSach);
        pnlDanhSach.setLayout(pnlDanhSachLayout);
        pnlDanhSachLayout.setHorizontalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCheckAllDrinks, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUncheckAllDrinks, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteCheckedDrinks, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlDanhSachLayout.setVerticalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteCheckedDrinks)
                    .addComponent(btnUncheckAllDrinks)
                    .addComponent(btnCheckAllDrinks))
                .addContainerGap())
        );

        tabs.addTab("DANH SÁCH", pnlDanhSach);

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/cafe/icons/trump-small.png"))); // NOI18N

        jLabel2.setText("Mã đồ uống");

        jLabel3.setText("Đơn giá");

        jLabel4.setText("Tên đồ uống");

        jLabel5.setText("Giảm giá");

        jLabel6.setText("Loại");

        jLabel7.setText("Trạng thái");

        groupTrangThai.add(rdoAvailable);
        rdoAvailable.setText("Sẵn có");

        groupTrangThai.add(rdoUnavailable);
        rdoUnavailable.setText("Hết hàng");

        btnCreateDrink.setText("Tạo mới");
        btnCreateDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDrinkActionPerformed(evt);
            }
        });

        btnUpdateDrink.setText("Cập nhật");
        btnUpdateDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDrinkActionPerformed(evt);
            }
        });

        btnDeleteDrink.setText("Xóa");
        btnDeleteDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDrinkActionPerformed(evt);
            }
        });

        btnClearFormDrink.setText("Nhập mới");
        btnClearFormDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFormDrinkActionPerformed(evt);
            }
        });

        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMovePrevious.setText("<<");
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });

        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        txtDiscount.setValue(0);

        btnChooseFile.setText("Chọn ảnh");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBieuMauLayout = new javax.swing.GroupLayout(pnlBieuMau);
        pnlBieuMau.setLayout(pnlBieuMauLayout);
        pnlBieuMauLayout.setHorizontalGroup(
            pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChooseFile)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                    .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                    .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtDrinkId, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                    .addGap(77, 77, 77)))
                            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)))
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                    .addComponent(rdoAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                    .addComponent(rdoUnavailable))
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDrinkName)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(80, Short.MAX_VALUE))
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addComponent(btnCreateDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearFormDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMoveFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMovePrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoveNext, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoveLast, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        pnlBieuMauLayout.setVerticalGroup(
            pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDrinkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDrinkId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)))
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rdoAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rdoUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnChooseFile, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateDrink)
                    .addComponent(btnUpdateDrink)
                    .addComponent(btnDeleteDrink)
                    .addComponent(btnClearFormDrink)
                    .addComponent(btnMoveLast)
                    .addComponent(btnMoveNext)
                    .addComponent(btnMovePrevious)
                    .addComponent(btnMoveFirst))
                .addContainerGap())
        );

        tabs.addTab("BIỂU MẪU", pnlBieuMau);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        tabs.getAccessibleContext().setAccessibleParent(tabs);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        // TODO add your handling code here:
        if (tblCategories.getSelectedRow() != -1) { // Đảm bảo có dòng được chọn
            this.fillToTable(); // Tải lại bảng đồ uống theo loại vừa chọn
        }
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void tblDrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDrinksMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) { // Kiểm tra nếu là double-click
            if (tblDrinks.getSelectedRow() != -1) { // Đảm bảo có dòng được chọn
                this.edit(); // Gọi phương thức edit() để hiển thị chi tiết lên form
            }
        }
    }//GEN-LAST:event_tblDrinksMouseClicked

    private void btnCreateDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDrinkActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnCreateDrinkActionPerformed

    private void btnUpdateDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDrinkActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnUpdateDrinkActionPerformed

    private void btnDeleteDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDrinkActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnDeleteDrinkActionPerformed

    private void btnClearFormDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFormDrinkActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnClearFormDrinkActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
        this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        // TODO add your handling code here:
        this.chooseFile();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void btnCheckAllDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllDrinksActionPerformed
        // TODO add your handling code here:
         this.checkAll();
    }//GEN-LAST:event_btnCheckAllDrinksActionPerformed

    private void btnUncheckAllDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllDrinksActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllDrinksActionPerformed

    private void btnDeleteCheckedDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedDrinksActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedDrinksActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DrinkManagerJDialog dialog = new DrinkManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAllDrinks;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnClearFormDrink;
    private javax.swing.JButton btnCreateDrink;
    private javax.swing.JButton btnDeleteCheckedDrinks;
    private javax.swing.JButton btnDeleteDrink;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.JButton btnUncheckAllDrinks;
    private javax.swing.JButton btnUpdateDrink;
    private javax.swing.JComboBox<poly.cafe.entity.Category> cboCategories;
    private javax.swing.ButtonGroup groupTrangThai;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JPanel pnlBieuMau;
    private javax.swing.JPanel pnlDanhSach;
    private javax.swing.JRadioButton rdoAvailable;
    private javax.swing.JRadioButton rdoUnavailable;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDrinks;
    private javax.swing.JSlider txtDiscount;
    private javax.swing.JTextField txtDrinkId;
    private javax.swing.JTextField txtDrinkName;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables


    @Override
    public void fillCategories() {
        // Cho JComboBox cboCategories (trong tab BIỂU MẪU)
        DefaultComboBoxModel<Category> cboModel = (DefaultComboBoxModel<Category>) cboCategories.getModel(); 
        cboModel.removeAllElements(); 

        // Cho JTable tblCategories (trong tab DANH SÁCH)
        DefaultTableModel tblModel = (DefaultTableModel) tblCategories.getModel(); 
        tblModel.setRowCount(0); 

        try {
            categoriesList = categoryDAO.findAll(); 
            for (Category category : categoriesList) {
                cboModel.addElement(category); 
                // Đây là dòng bạn đã sửa theo Lựa chọn A:
                tblModel.addRow(new Object[]{category.getName()}); // Chỉ thêm tên loại
            }

            if (!categoriesList.isEmpty()) {
                tblCategories.setRowSelectionInterval(0, 0); // Chọn loại đầu tiên trong bảng
                cboCategories.setSelectedIndex(0); // Chọn loại đầu tiên trong combobox
                this.fillToTable(); // Tải đồ uống cho loại được chọn đầu tiên
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tải danh sách loại đồ uống!", "Lỗi");
            e.printStackTrace();
        }
    }
    @Override
    public void chooseFile() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { //
        File selectedFile = fileChooser.getSelectedFile(); //

        // Thư mục để lưu ảnh, ví dụ "images" hoặc "photos" trong thư mục gốc của dự án.
        // XIcon.copyTo sẽ tạo thư mục này nếu chưa có.
        // Đảm bảo XStr.getKey() trong XIcon.copyTo hoạt động đúng để tạo tên file duy nhất.
        File copiedFile = XIcon.copyTo(selectedFile, "images"); // [cite: 89] Lab4 dùng "images"

        if (copiedFile != null) {
            // Hiển thị ảnh lên lblImage và lưu tên file đã copy vào tooltip
            // XIcon.setIcon(lblImage, copiedFile.getAbsolutePath()); // Cách 1: Dùng đường dẫn tuyệt đối
            XIcon.setIcon(lblImage, copiedFile.getName());     // Cách 2: Dùng tên file (nếu XIcon.getIcon xử lý được việc tìm trong thư mục "images")
                                                              // Hoặc nếu XIcon.copyTo trả về file trong thư mục classpath/images
                                                              // Hiện tại XIcon.getIcon của bạn tìm trong /poly/cafe/icons/
                                                              // Để đơn giản và nhất quán, XIcon.copyTo nên copy vào thư mục resources/poly/cafe/icons/images
                                                              // và trả về tên file để getIcon tìm được.
                                                              // Hoặc XIcon.getIcon cần được mở rộng để đọc từ thư mục "images" gốc dự án.

            // Để đơn giản nhất và phù hợp với XIcon hiện tại (tìm trong /poly/cafe/icons/):
            // 1. XIcon.copyTo nên copy file vào thư mục src/main/resources/poly/cafe/icons/
            //    (hoặc một thư mục con như src/main/resources/poly/cafe/icons/drinks/)
            // 2. Sau đó lấy tên file đã copy (có thể là tên duy nhất) để lưu.
            //
            // Giả sử XIcon.copyTo đã copy vào một nơi mà XIcon.getIcon(tên_file) có thể đọc được,
            // hoặc XIcon.getIcon(đường_dẫn_tuyệt_đối_file_đã_copy) đọc được.

            // Lưu tên file (không phải đường dẫn đầy đủ) vào tooltip để getForm() có thể lấy
            lblImage.setToolTipText(copiedFile.getName()); // [cite: 89] Lưu tên file vào tooltip

            // Hiển thị ảnh đã chọn lên lblImage
            // Cần đảm bảo lblImage có kích thước để hiển thị ảnh đúng cách.
            ImageIcon icon = XIcon.getIcon(copiedFile.getAbsolutePath()); // Tải lại icon từ file đã copy
            if (icon != null) {
                if (lblImage.getWidth() > 0 && lblImage.getHeight() > 0) {
                    Image scaledImage = icon.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
                    lblImage.setIcon(new ImageIcon(scaledImage));
                } else {
                    lblImage.setIcon(icon); // Hiển thị ảnh gốc nếu JLabel chưa có kích thước
                }
            }
            } else {
                XDialog.alert("Sao chép file ảnh thất bại!", "Lỗi");
            }
        }
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null); // Căn giữa JDialog
        this.fillCategories(); // Tải và hiển thị danh sách loại
        // fillToTable() sẽ được gọi sau khi một category được chọn trong fillCategories()
        // hoặc bạn có thể gọi fillToTable() với category đầu tiên ở đây.
        // Theo Lab4 (trang 2, mục "Tải và hiển thị loại lên cboCategories và tblCategories")
        // và (trang 3, fillCategories()), việc chọn category đầu tiên và fillToTable()
        // được xử lý trong fillCategories().
    }

    // Trong DrinkManagerJDialog.java

    @Override
    public void setForm(Drink entity) {
        txtDrinkId.setText(entity.getId());
        txtDrinkName.setText(entity.getName());
        txtUnitPrice.setText(String.valueOf(entity.getUnitPrice()));

        // Đặt giá trị cho JSlider txtDiscount
        // entity.getDiscount() bây giờ là int (0-100)
        if (txtDiscount != null && entity != null) {
            txtDiscount.setValue(entity.getDiscount());
        }

        // Chọn Category tương ứng trong JComboBox cboCategories
        // ... (giữ nguyên code chọn category của bạn) ...
        if (entity.getCategoryId() != null && cboCategories.getModel().getSize() > 0) {
            DefaultComboBoxModel<Category> model = (DefaultComboBoxModel<Category>) cboCategories.getModel();
            for (int i = 0; i < model.getSize(); i++) {
                Category categoryInComboBox = model.getElementAt(i);
                if (categoryInComboBox.getId().equals(entity.getCategoryId())) {
                    cboCategories.setSelectedIndex(i);
                    break;
                }
            }
        } else if (cboCategories.getItemCount() > 0) {
            cboCategories.setSelectedIndex(0);
        }

        // Hiển thị hình ảnh
        // ... (giữ nguyên code hiển thị hình ảnh của bạn) ...
        if (entity.getImage() != null && !entity.getImage().isBlank()) {
            lblImage.setToolTipText(entity.getImage());
             ImageIcon icon = XIcon.getIcon(entity.getImage());
             if (icon != null && lblImage.getWidth() > 0 && lblImage.getHeight() > 0) {
                 Image scaledImage = icon.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
                 lblImage.setIcon(new ImageIcon(scaledImage));
             } else if (icon != null) {
                 lblImage.setIcon(icon);
             } else {
                 lblImage.setIcon(null);
             }
        } else {
            lblImage.setIcon(null);
            lblImage.setToolTipText(null);
        }

        // Đặt trạng thái Available/Unavailable
        if (entity.isAvailable()) {
            rdoAvailable.setSelected(true);
        } else {
            rdoUnavailable.setSelected(true);
        }
    }

    @Override
    public Drink getForm() {
        Drink drink = Drink.builder().build(); // Hoặc new Drink();

        drink.setId(txtDrinkId.getText().trim());
        drink.setName(txtDrinkName.getText().trim());

        try {
            drink.setUnitPrice(Double.parseDouble(txtUnitPrice.getText().trim()));
        } catch (NumberFormatException e) {
            XDialog.alert("Đơn giá phải là một số!", "Lỗi định dạng");
            txtUnitPrice.requestFocus();
            return null; // Trả về null nếu có lỗi định dạng
        }

        // txtDiscount là JSlider, getValue() trả về int (0-100)
        // Entity Drink của bạn lưu discount là int (0-100)
        if (txtDiscount != null) {
            drink.setDiscount(txtDiscount.getValue());
        }

        // Lấy CategoryId từ JComboBox cboCategories
        Object selectedCategoryObj = cboCategories.getSelectedItem();
        if (selectedCategoryObj instanceof Category) {
            Category selectedCategory = (Category) selectedCategoryObj;
            drink.setCategoryId(selectedCategory.getId());
        } else if (cboCategories.getItemCount() > 0) {
            // Nếu không có gì được chọn hoặc kiểu không đúng, cố gắng lấy từ mục đầu tiên
            // Hoặc bạn có thể yêu cầu người dùng chọn
            Category firstCategory = (Category) cboCategories.getItemAt(0);
            drink.setCategoryId(firstCategory.getId());
             XDialog.alert("Vui lòng chọn loại đồ uống.", "Thiếu thông tin");
             cboCategories.requestFocus();
             // return null; // Cân nhắc trả về null nếu loại là bắt buộc và chưa được chọn đúng
        } else {
             XDialog.alert("Chưa có danh mục nào. Vui lòng thêm danh mục trước.", "Lỗi");
             return null;
        }


        // Lấy tên file ảnh từ ToolTipText của lblImage
        // Tên file ảnh này sẽ được cập nhật khi người dùng chọn ảnh mới bằng btnChooseFile
        if (lblImage.getToolTipText() != null && !lblImage.getToolTipText().isBlank()) {
            drink.setImage(lblImage.getToolTipText());
        } else {
            drink.setImage("product.png"); // Ảnh mặc định nếu không có
        }

        drink.setAvailable(rdoAvailable.isSelected());

        // Kiểm tra các trường bắt buộc khác nếu cần
        if (drink.getId().isBlank()) {
            XDialog.alert("Mã đồ uống không được để trống!", "Thiếu thông tin");
            txtDrinkId.requestFocus();
            return null;
        }
        if (drink.getName().isBlank()) {
            XDialog.alert("Tên đồ uống không được để trống!", "Thiếu thông tin");
            txtDrinkName.requestFocus();
            return null;
        }

        return drink;
    }

    // Trong DrinkManagerJDialog.java

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trên bảng tblDrinks

        try {
            Category selectedCategory = null;
            int selectedCategoryRowInTable = tblCategories.getSelectedRow();

            if (selectedCategoryRowInTable != -1 && !categoriesList.isEmpty()) {
                selectedCategory = categoriesList.get(selectedCategoryRowInTable);
            }
            // Nếu không có dòng nào được chọn trong tblCategories,
            // bạn có thể quyết định không tải gì hoặc tải từ category đầu tiên (nếu muốn)
            // Tuy nhiên, fillCategories() đã gọi fillToTable() sau khi chọn dòng đầu tiên,
            // nên trường hợp này ít khi xảy ra trừ khi tblCategories trống.

            if (selectedCategory != null) {
                drinksList = drinkDAO.findByCategoryId(selectedCategory.getId()); // Lấy danh sách đồ uống theo CategoryId [cite: 90]
                for (Drink drink : drinksList) {
                    Object[] row = new Object[]{
                        drink.getId(),
                        drink.getName(),
                        String.format("%,.0f VNĐ", drink.getUnitPrice()),
                        String.format("%d%%", drink.getDiscount()), // <<<< THAY ĐỔI Ở ĐÂY
                        drink.isAvailable() ? "Sẵn có" : "Hết hàng",
                        false
                    };
                    model.addRow(row);
                }
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tải danh sách đồ uống!", "Lỗi");
            e.printStackTrace();
        }
        // Theo Lab4, trang 3, có gọi this.clear() ở đây. [cite: 91]
        // this.clear(); // Nếu bạn muốn form "BIỂU MẪU" được xóa mỗi khi bảng đồ uống tải lại.
                        // Hãy cân nhắc xem đây có phải là hành vi mong muốn không.
                        // Thông thường, clear() sẽ được gọi khi nhấn nút "Nhập mới" hoặc sau khi thêm/sửa/xóa thành công.
    }

    @Override
    public void edit() {
        try {
            int selectedRow = tblDrinks.getSelectedRow();
            if (selectedRow != -1 && !drinksList.isEmpty()) {
                // Lấy đối tượng Drink từ drinksList dựa trên dòng được chọn trong tblDrinks
                // Điều này an toàn hơn là đọc trực tiếp từ model của JTable nếu bạn có dữ liệu phức tạp
                Drink selectedDrink = drinksList.get(selectedRow);

                this.setForm(selectedDrink); // Hiển thị thông tin lên form "BIỂU MẪU"
                this.setEditable(true);    // Đặt form ở chế độ cho phép sửa
                tabs.setSelectedIndex(1); // Chuyển sang tab "BIỂU MẪU" (index của tab "BIỂU MẪU" là 1)
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi hiển thị chi tiết đồ uống!", "Lỗi");
            e.printStackTrace();
        }
    }

    @Override
    public void create() {
        Drink newDrink = this.getForm(); // Lấy dữ liệu từ form
        if (newDrink != null) { // Chỉ tiếp tục nếu getForm() không trả về null (không có lỗi validation)
            try {
                // Kiểm tra xem ID đồ uống đã tồn tại chưa (nếu ID không phải tự tăng)
                if (drinkDAO.findById(newDrink.getId()) != null) {
                    XDialog.alert("Mã đồ uống này đã tồn tại!", "Lỗi");
                    txtDrinkId.requestFocus();
                    return;
                }

                drinkDAO.create(newDrink); // Gọi DAO để thêm vào CSDL
                this.fillToTable();       // Tải lại danh sách đồ uống lên bảng tblDrinks
                this.clear();             // Xóa trắng form và đặt về trạng thái ban đầu
                XDialog.alert("Thêm mới đồ uống thành công!", "Thông báo");
            } catch (Exception e) {
                XDialog.alert("Thêm mới đồ uống thất bại!", "Lỗi");
                e.printStackTrace();
            }
        }
    }

    @Override
    public void update() {
        Drink drinkToUpdate = this.getForm(); // Lấy dữ liệu từ form
        if (drinkToUpdate != null) {
            try {
                // Kiểm tra xem đồ uống có thực sự tồn tại để cập nhật không
                if (drinkDAO.findById(drinkToUpdate.getId()) == null) {
                    XDialog.alert("Không tìm thấy đồ uống để cập nhật!", "Lỗi");
                    return;
                }
                drinkDAO.update(drinkToUpdate); // Gọi DAO để cập nhật
                this.fillToTable();           // Tải lại bảng
                // Không cần clear() ở đây, giữ lại thông tin vừa sửa trên form
                // nhưng có thể đặt lại trạng thái editable
                // this.setEditable(false); // Chuyển về trạng thái xem sau khi cập nhật
                XDialog.alert("Cập nhật đồ uống thành công!", "Thông báo");
            } catch (Exception e) {
                XDialog.alert("Cập nhật đồ uống thất bại!", "Lỗi");
                e.printStackTrace();
            }
        }
    }

    @Override
    public void delete() {
        String drinkIdToDelete = txtDrinkId.getText(); // Lấy ID từ form
        if (drinkIdToDelete == null || drinkIdToDelete.isBlank()) {
            XDialog.alert("Vui lòng chọn đồ uống cần xóa (từ danh sách hoặc form).", "Thông báo");
            return;
        }

        // Chỉ cho phép xóa khi form đang ở chế độ editable (đã chọn 1 mục để sửa/xóa)
        // Và btnDeleteDrink đang được bật
        if (btnDeleteDrink.isEnabled()) { // Hoặc kiểm tra this.isEditable() nếu có biến đó
            if (XDialog.confirm("Bạn thực sự muốn xóa đồ uống '" + txtDrinkName.getText() + "'?")) { //
                try {
                    drinkDAO.deleteById(drinkIdToDelete); // Gọi DAO để xóa
                    this.fillToTable();               // Tải lại bảng
                    this.clear();                     // Xóa trắng form
                    XDialog.alert("Xóa đồ uống thành công!", "Thông báo");
                } catch (Exception e) {
                    // Xử lý lỗi nếu có khóa ngoại ràng buộc (ví dụ đồ uống đã có trong BillDetail)
                    XDialog.alert("Xóa đồ uống thất bại! Có thể đồ uống này đã được sử dụng trong hóa đơn.", "Lỗi");
                    e.printStackTrace();
                }
            }
        } else {
             XDialog.alert("Vui lòng chọn một đồ uống và chuyển sang chế độ sửa/xem chi tiết trước khi xóa.", "Thông báo");
        }
    }

    // Trong DrinkManagerJDialog.java

    @Override
    public void clear() {
        // Tạo một đối tượng Drink rỗng hoặc với giá trị mặc định
        Drink newDrink = Drink.builder()
                              .id("")       // Hoặc bạn có thể để người dùng nhập hoặc tự sinh
                              .name("")
                              .unitPrice(0)
                              .discount(0)
                              .available(true) // Mặc định là "Sẵn có"
                              .image("product.png") // Ảnh mặc định từ entity Drink
                              .categoryId(null) // Sẽ được chọn từ cboCategories
                              .build();
        this.setForm(newDrink); // Hiển thị Drink rỗng này lên form

        // Đặt lại ComboBox loại đồ uống về mục đầu tiên (nếu có)
        if (cboCategories.getItemCount() > 0) {
            cboCategories.setSelectedIndex(0);
        }

        // Đặt lại trạng thái các nút và trường (sẽ làm trong setEditable)
        this.setEditable(false); // Trạng thái ban đầu thường là không cho sửa/xóa trực tiếp

        tabs.setSelectedIndex(1); // Chuyển sang tab "BIỂU MẪU" nếu đang không ở đó
        txtDrinkId.requestFocus(); // Focus vào trường Mã đồ uống
    }

    @Override
    public void setEditable(boolean editable) {
        // Các trường nhập liệu trên form "BIỂU MẪU"
        txtDrinkId.setEnabled(!editable);      // Mã đồ uống thường không cho sửa khi đã có,
                                               // nhưng cho phép nhập khi đang ở trạng thái !editable (tức là chuẩn bị tạo mới)
        txtDrinkName.setEnabled(editable);
        txtUnitPrice.setEnabled(editable);
        txtDiscount.setEnabled(editable);      // JSlider txtDiscount
        cboCategories.setEnabled(editable);
        if (btnChooseFile != null) { // Kiểm tra null cho btnChooseFile nếu nó được khai báo
            btnChooseFile.setEnabled(editable);
        }
        rdoAvailable.setEnabled(editable);
        rdoUnavailable.setEnabled(editable);

        // Các nút CRUD trên form "BIỂU MẪU"
        btnCreateDrink.setEnabled(!editable);  // Bật khi không ở chế độ sửa/xem chi tiết (tức là sẵn sàng để tạo mới)
        btnUpdateDrink.setEnabled(editable);    // Bật khi đang ở chế độ sửa/xem chi tiết
        btnDeleteDrink.setEnabled(editable);    // Bật khi đang ở chế độ sửa/xem chi tiết
        // btnClearFormDrink luôn có thể bật để người dùng xóa form bất cứ lúc nào
        // btnClearFormDrink.setEnabled(true); // Hoặc tùy theo logic của bạn

        // Các nút điều hướng trên form "BIỂU MẪU"
        boolean hasDrinksInTable = (tblDrinks.getRowCount() > 0);
        int selectedRow = tblDrinks.getSelectedRow();

        // Nút điều hướng thường chỉ hoạt động khi một bản ghi đang được hiển thị trên form (tức là editable = true)
        // và bảng tblDrinks có dữ liệu.
        btnMoveFirst.setEnabled(editable && hasDrinksInTable && selectedRow > 0);
        btnMovePrevious.setEnabled(editable && hasDrinksInTable && selectedRow > 0);
        btnMoveNext.setEnabled(editable && hasDrinksInTable && selectedRow < (tblDrinks.getRowCount() - 1));
        btnMoveLast.setEnabled(editable && hasDrinksInTable && selectedRow < (tblDrinks.getRowCount() - 1));

        // Nếu không ở chế độ xem/sửa chi tiết (ví dụ sau khi clear form để tạo mới, editable = false)
        // thì các nút điều hướng nên tắt.
        if (!editable) {
            btnMoveFirst.setEnabled(false);
            btnMovePrevious.setEnabled(false);
            btnMoveNext.setEnabled(false);
            btnMoveLast.setEnabled(false);
        }

        // Các nút xử lý checkbox trên bảng tblDrinks (tab DANH SÁCH)
        // Các nút này thường được bật khi không ở chế độ sửa chi tiết trên form (khi editable là false)
        // và khi bảng tblDrinks có dữ liệu.
        if (btnCheckAllDrinks != null) btnCheckAllDrinks.setEnabled(!editable && hasDrinksInTable);
        if (btnUncheckAllDrinks != null) btnUncheckAllDrinks.setEnabled(!editable && hasDrinksInTable);
        if (btnDeleteCheckedDrinks != null) btnDeleteCheckedDrinks.setEnabled(!editable && hasDrinksInTable);

        // Nếu đang ở chế độ sửa/xem chi tiết (editable = true), thì tắt các nút checkbox của bảng
        // vì lúc này người dùng đang thao tác trên form chi tiết.
        if (editable) {
            if (btnCheckAllDrinks != null) btnCheckAllDrinks.setEnabled(false);
            if (btnUncheckAllDrinks != null) btnUncheckAllDrinks.setEnabled(false);
            if (btnDeleteCheckedDrinks != null) btnDeleteCheckedDrinks.setEnabled(false);
        }
    }

    @Override
    public void checkAll() {
        DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            // Giả sử cột checkbox là cột thứ 6 (index 5)
            // và kiểu của cột đó trong TableModel đã được thiết lập là Boolean
            // (thường là thông qua getColumnClass trong DefaultTableModel của bạn,
            // hoặc NetBeans GUI builder tự thiết lập nếu bạn chọn kiểu cột là Boolean)
            if (model.getColumnClass(5).equals(Boolean.class)) { // So sánh class bằng .equals()
                 model.setValueAt(true, i, 5); // Đặt giá trị là true
            } else {
                // In ra cảnh báo nếu kiểu cột không đúng, để dễ debug
                System.err.println("Cảnh báo: Cột 5 của tblDrinks không phải là kiểu Boolean trong checkAll().");
            }
        }
    }

    @Override
    public void uncheckAll() {
        DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            // Giả sử cột checkbox là cột thứ 6 (index 5)
            if (model.getColumnClass(5).equals(Boolean.class)) {
                 model.setValueAt(false, i, 5); // Đặt giá trị là false
            } else {
                System.err.println("Cảnh báo: Cột 5 của tblDrinks không phải là kiểu Boolean trong uncheckAll().");
            }
        }
    }

    @Override
    public void deleteCheckedItems() {
            if (XDialog.confirm("Bạn thực sự muốn xóa các đồ uống đã chọn?")) { //
            DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
            boolean deleted = false;
            // Duyệt ngược để tránh vấn đề về index khi xóa nhiều dòng
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                // Giả sử cột checkbox là cột thứ 6 (index 5)
                Boolean isChecked = (Boolean) model.getValueAt(i, 5);
                if (isChecked != null && isChecked) {
                    try {
                        // Lấy ID của drink từ drinksList dựa vào index của bảng
                        // Điều này yêu cầu drinksList phải đồng bộ với thứ tự hiển thị trên bảng
                        // Hoặc lấy ID trực tiếp từ cột ID của bảng nếu bạn hiển thị nó
                        String drinkIdToDelete = drinksList.get(i).getId(); // Giả định drinksList đồng bộ
                                                                         // Hoặc String drinkIdToDelete = (String) model.getValueAt(i, 0); // Nếu cột 0 là ID
                        drinkDAO.deleteById(drinkIdToDelete);
                        deleted = true;
                    } catch (Exception e) {
                        XDialog.alert("Lỗi khi xóa đồ uống: " + drinksList.get(i).getName(), "Lỗi");
                        e.printStackTrace();
                        // Có thể dừng lại hoặc tiếp tục xóa các mục khác
                    }
                }
            }

            if (deleted) {
                this.fillToTable(); // Tải lại bảng sau khi xóa
                XDialog.alert("Đã xóa các đồ uống được chọn.", "Thông báo");
            } else {
                XDialog.alert("Không có đồ uống nào được chọn để xóa.", "Thông báo");
            }
        }
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        int currentRow = tblDrinks.getSelectedRow();
        // Nếu không có dòng nào được chọn, hoặc đang ở dòng đầu, có thể không làm gì hoặc về cuối
        if (currentRow > 0) {
            this.moveTo(currentRow - 1);
        } else if (currentRow == 0) {
             // Đang ở dòng đầu, có thể không làm gì hoặc thông báo
        } else if (tblDrinks.getRowCount() > 0) {
            // Nếu không có gì được chọn và bảng có dữ liệu, có thể di chuyển đến dòng đầu tiên
            this.moveTo(0);
        }
    }

    @Override
    public void moveNext() {
        int currentRow = tblDrinks.getSelectedRow();
        if (currentRow < tblDrinks.getRowCount() - 1 && currentRow != -1) {
            this.moveTo(currentRow + 1);
        } else if (currentRow == tblDrinks.getRowCount() - 1) {
            // Đang ở dòng cuối, có thể không làm gì hoặc thông báo
        } else if (tblDrinks.getRowCount() > 0) {
            // Nếu không có gì được chọn và bảng có dữ liệu, có thể di chuyển đến dòng đầu tiên
             this.moveTo(0);
        }
    }

    @Override
    public void moveLast() {
        this.moveTo(tblDrinks.getRowCount() - 1);
    }

    @Override
    public void moveTo(int rowIndex) {
        if (tblDrinks.getRowCount() > 0) {
        // Điều chỉnh rowIndex nếu nó ra ngoài biên
        if (rowIndex < 0) {
            rowIndex = 0; // Hoặc rowIndex = tblDrinks.getRowCount() - 1; (về cuối)
        } else if (rowIndex >= tblDrinks.getRowCount()) {
            rowIndex = tblDrinks.getRowCount() - 1; // Hoặc rowIndex = 0; (về đầu)
        }

        tblDrinks.setRowSelectionInterval(rowIndex, rowIndex); // Chọn dòng trên bảng
        // JTable tự cuộn đến dòng được chọn nếu cần
        // Rectangle rect = tblDrinks.getCellRect(rowIndex, 0, true);
        // tblDrinks.scrollRectToVisible(rect);

        this.edit(); // Gọi edit để hiển thị thông tin của dòng mới được chọn lên form
                     // và chuyển sang tab "BIỂU MẪU", đặt setEditable(true)
        } else {
            // Không có dòng nào trong bảng để di chuyển đến
            this.clear(); // Có thể xóa trắng form
            this.setEditable(false); // Đặt về trạng thái không sửa
            XDialog.alert("Danh sách đồ uống trống!", "Thông báo");
        }
    }
}
